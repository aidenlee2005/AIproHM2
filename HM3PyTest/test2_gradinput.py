import torch
import torch.nn.functional as F

# ----------------------------
# 定义输入 input: shape (1, 3, 4, 4)
# ----------------------------
input_data = torch.tensor(
[[[[0.9, 0.8, 0.5, 0.8],
   [0.2, 0.6, 0.1, 0.4],
   [0.4, 0.5, 0.5, 0.2],
   [0.2, 0.8, 0.8, 0.3]],
  [[0.5, 0.1, 0.6, 0.1],
   [0.2, 0.9, 0.7, 0.3],
   [0.0, 0.7, 0.7, 0.2],
   [0.0, 0.5, 0.9, 0.8]],
  [[0.2, 0.3, 0.2, 0.0],
   [0.8, 0.7, 0.6, 0.8],
   [0.0, 0.7, 0.2, 0.4],
   [0.7, 0.1, 0.8, 0.9]]]],
dtype=torch.float32, requires_grad=True)

# ----------------------------
# 定义卷积核 weight: shape (2, 3, 3, 3)
# ----------------------------
weight_data = torch.tensor(
[[[[0.9, 0.8, 0.5],
   [0.8, 0.2, 0.6],
   [0.1, 0.4, 0.4]],
  [[0.5, 0.5, 0.2],
   [0.2, 0.8, 0.8],
   [0.3, 0.5, 0.1]],
  [[0.6, 0.1, 0.2],
   [0.9, 0.7, 0.3],
   [0.0, 0.7, 0.7]]],
 [[[0.2, 0.0, 0.5],
   [0.9, 0.8, 0.2],
   [0.3, 0.2, 0.0]],
  [[0.8, 0.7, 0.6],
   [0.8, 0.0, 0.7],
   [0.2, 0.4, 0.7]],
  [[0.1, 0.8, 0.9],
   [0.8, 0.3, 0.8],
   [0.2, 0.9, 0.6]]]],
dtype=torch.float32, requires_grad=True)

# ----------------------------
# Forward: conv2d with same padding
# ----------------------------
output = F.conv2d(input_data, weight_data, stride=1, padding=1)
# print("Forward output:\n", output.detach().numpy().round(2))

# ----------------------------
# Backward: 给定 grad_output
# ----------------------------
grad_output = torch.tensor(
[[[[0.9, 0.8, 0.5, 0.8],
   [0.2, 0.6, 0.1, 0.4],
   [0.4, 0.5, 0.5, 0.2],
   [0.2, 0.8, 0.8, 0.3]],
  [[0.5, 0.1, 0.6, 0.1],
   [0.2, 0.9, 0.7, 0.3],
   [0.0, 0.7, 0.7, 0.2],
   [0.0, 0.5, 0.9, 0.8]]]],
dtype=torch.float32)

output.backward(grad_output)

# ----------------------------
# 打印反向传播结果
# ----------------------------
print(input_data.grad.detach().numpy().round(2))
# print("\nGrad Weight:\n", weight_data.grad.detach().numpy().round(2))
